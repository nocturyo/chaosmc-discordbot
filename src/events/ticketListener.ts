import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonInteraction,
  ButtonStyle,
  ChannelType,
  Client,
  EmbedBuilder,
  Events,
  ModalBuilder,
  PermissionFlagsBits,
  StringSelectMenuInteraction,
  TextChannel,
  TextInputBuilder,
  TextInputStyle,
} from 'discord.js';

import {
  getTicketCategoryId,
  getTicketSupportRoleId,
  nextTicketCounter,
  getLogChannelId, // do wysy≈Çki transkryptu z plikiem
} from '../utils/configManager';

import { sendLogEmbed } from '../utils/logSender';
import { makeTranscript } from '../utils/transcript';
import { prisma } from '../utils/database'; // ‚úÖ DB

/* =======================
 *   Kategorie ticket√≥w
 * ======================= */

type Cat = {
  key: string;
  name: string;
  emoji: string;
  intro: string; // instrukcja wy≈õwietlana w kanale ticketa
  prefix: string; // czƒô≈õƒá nazwy kana≈Çu
};

const CATEGORIES: Record<string, Cat> = {
  appeal_ban: {
    key: 'appeal_ban',
    name: 'Odwo≈Çanie bana',
    emoji: 'üîì',
    prefix: 'ban',
    intro:
      'Podaj sw√≥j nick, datƒô bana (je≈õli znasz), pow√≥d widoczny przy banie oraz kr√≥tkie uzasadnienie odwo≈Çania.',
  },
  appeal_warn: {
    key: 'appeal_warn',
    name: 'Odwo≈Çanie warna',
    emoji: 'üìù',
    prefix: 'warn',
    intro:
      'Podaj sw√≥j nick, datƒô otrzymania warna (je≈õli znasz), jego pow√≥d oraz kr√≥tkie uzasadnienie odwo≈Çania.',
  },
  report_cheater: {
    key: 'report_cheater',
    name: 'Zg≈Çoszenie cheatera',
    emoji: 'üö®',
    prefix: 'cheat',
    intro:
      'Podaj nick podejrzanego, tryb/serwer, orientacyjnƒÖ godzinƒô oraz **dowody** (screeny/wideo).',
  },
  discord_issue: {
    key: 'discord_issue',
    name: 'Serwer Discord',
    emoji: 'üí¨',
    prefix: 'discord',
    intro:
      'Opisz problem na Discordzie (rola, dostƒôp, ustawienia, b≈Çƒôdy itp.).',
  },
  mc_issue: {
    key: 'mc_issue',
    name: 'Problem Minecraft',
    emoji: '‚õèÔ∏è',
    prefix: 'mc',
    intro:
      'Opisz problem w grze (wej≈õcie, lagi, b≈Çƒôdy), wersjƒô Minecrafta i ewentualne mody.',
  },
  shop_issue: {
    key: 'shop_issue',
    name: 'Problem z zakupem na WWW',
    emoji: 'üõí',
    prefix: 'shop',
    intro:
      'Podaj numer zam√≥wienia lub e-mail, metodƒô p≈Çatno≈õci i opisz problem (brak realizacji, b≈ÇƒÖd itd.).',
  },
  bug_report: {
    key: 'bug_report',
    name: 'Znalaz≈Çem b≈ÇƒÖd',
    emoji: 'üêû',
    prefix: 'bug',
    intro:
      'Opisz b≈ÇƒÖd krok po kroku (co zrobi≈Çe≈õ, co siƒô sta≈Ço, co powinno siƒô staƒá). Dodaj screeny/wideo.',
  },
};

/* =======================
 *     G≈Ç√≥wny listener
 * ======================= */

export function setupTicketListener(client: Client) {
  client.on(Events.InteractionCreate, async (interaction) => {
    try {
      // SELECT: wyb√≥r kategorii z panelu
      if (interaction.isStringSelectMenu() && interaction.customId === 'ticket_select') {
        await handleSelect(interaction);
        return;
      }

      // BUTTONY w kanale ticketa
      if (interaction.isButton()) {
        if (interaction.customId === 'ticket_close') {
          await handleClose(interaction);
          return;
        }
        if (interaction.customId === 'ticket_add') {
          await showUserModal(interaction, 'ticket_add_modal', 'Dodaj u≈ºytkownika do ticketa');
          return;
        }
        if (interaction.customId === 'ticket_remove') {
          await showUserModal(interaction, 'ticket_remove_modal', 'Usu≈Ñ u≈ºytkownika z ticketa');
          return;
        }
      }

      // MODALE (dodaj/usu≈Ñ u≈ºytkownika)
      if (interaction.isModalSubmit()) {
        if (interaction.customId === 'ticket_add_modal') {
          await handleAddUser(interaction);
          return;
        }
        if (interaction.customId === 'ticket_remove_modal') {
          await handleRemoveUser(interaction);
          return;
        }
      }
    } catch (err) {
      console.error('[ticketListener] error:', err);
      if (interaction.isRepliable()) {
        try {
          if (!interaction.replied && !interaction.deferred) {
            await interaction.reply({ content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd.', ephemeral: true });
          } else {
            await interaction.followUp({ content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd.', ephemeral: true });
          }
        } catch {}
      }
    }
  });

  /* -----------------------
   *   Wyb√≥r kategorii
   * ----------------------- */
  async function handleSelect(inter: StringSelectMenuInteraction) {
    if (!inter.guild) {
      await inter.reply({ content: 'Ta akcja dzia≈Ça tylko na serwerze.', ephemeral: true });
      return;
    }

    const selected = inter.values[0];
    const cat = CATEGORIES[selected];
    if (!cat) {
      await inter.reply({ content: '‚ùå Nieznana kategoria.', ephemeral: true });
      return;
    }

    // üîé Najpierw spr√≥buj z DB
    let parentId: string | null = null;
    let supportRoleId: string | null = null;
    try {
      const cfg = await prisma.guildConfig.findUnique({
        where: { guildId: inter.guild.id },
        select: { ticketCategoryId: true, ticketSupportRoleId: true },
      });
      parentId = cfg?.ticketCategoryId ?? null;
      supportRoleId = cfg?.ticketSupportRoleId ?? null;
    } catch (e) {
      console.error('[ticketListener] DB read error:', e);
    }

    // üîÅ Fallback na Tw√≥j configManager (je≈õli brak w DB)
    if (!parentId) parentId = getTicketCategoryId() ?? null;
    if (!supportRoleId) supportRoleId = getTicketSupportRoleId() ?? null;

    if (!parentId || !supportRoleId) {
      await inter.reply({
        content: '‚ö†Ô∏è System ticket√≥w nie jest skonfigurowany. U≈ºyj **/ticketsetup**.',
        ephemeral: true,
      });
      return;
    }

    // (opcjonalnie) ograniczenie: 1 ticket na u≈ºytkownika
    const already = inter.guild.channels.cache.find(
      (ch) =>
        ch.type === ChannelType.GuildText &&
        ch.name.startsWith('ticket-') &&
        (ch as TextChannel).topic?.includes(`UID:${inter.user.id}`),
    );
    if (already) {
      await inter.reply({ content: `Masz ju≈º otwarty ticket: <#${already.id}>`, ephemeral: true });
      return;
    }

    const num = nextTicketCounter();
    const name = `ticket-${cat.prefix}-${num.toString().padStart(4, '0')}`;

    const ch = await inter.guild.channels.create({
      name,
      type: ChannelType.GuildText,
      parent: parentId,
      topic: `Ticket ${name} ‚Ä¢ Kategoria: ${cat.name} ‚Ä¢ UID:${inter.user.id}`,
      permissionOverwrites: [
        { id: inter.guild.roles.everyone, deny: [PermissionFlagsBits.ViewChannel] },
        {
          id: inter.user.id,
          allow: [
            PermissionFlagsBits.ViewChannel,
            PermissionFlagsBits.SendMessages,
            PermissionFlagsBits.AttachFiles,
            PermissionFlagsBits.ReadMessageHistory,
          ],
        },
        {
          id: supportRoleId,
          allow: [
            PermissionFlagsBits.ViewChannel,
            PermissionFlagsBits.SendMessages,
            PermissionFlagsBits.ReadMessageHistory,
            PermissionFlagsBits.AttachFiles,
          ],
        },
      ],
    });

    // ‚úÖ Zapisz do bazy rekord ticketa
    try {
      await prisma.ticket.create({
        data: {
          guildId: inter.guild.id,
          userId: inter.user.id,
          channelId: ch.id,
          // status: 'open' (domy≈õlnie z modelu)
        },
      });
    } catch (e) {
      console.error('‚ùå B≈ÇƒÖd zapisu ticketa do bazy:', e);
    }

    const intro = new EmbedBuilder()
      .setColor(0x8b5cf6)
      .setTitle(`${cat.emoji} ${cat.name}`)
      .setDescription(
        [
          `Witaj <@${inter.user.id}>! To jest Tw√≥j prywatny ticket w kategorii **${cat.name}**.`,
          '',
          `**Instrukcja:** ${cat.intro}`,
          '',
          `Zesp√≥≈Ç wsparcia <@&${supportRoleId}> wkr√≥tce siƒô odezwie.`,
        ].join('\n'),
      )
      .setFooter({ text: `CHAOSMC.ZONE ‚Ä¢ System ticket√≥w ‚Ä¢ ${name}` })
      .setTimestamp();

    const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder().setCustomId('ticket_close').setStyle(ButtonStyle.Danger).setLabel('Zamknij'),
      new ButtonBuilder().setCustomId('ticket_add').setStyle(ButtonStyle.Secondary).setLabel('Dodaj'),
      new ButtonBuilder().setCustomId('ticket_remove').setStyle(ButtonStyle.Secondary).setLabel('Usu≈Ñ'),
    );

    await (ch as TextChannel).send({
      content: `<@${inter.user.id}>`,
      embeds: [intro],
      components: [row],
    });

    await inter.reply({ content: `‚úÖ Utworzono ticket: ${ch}`, ephemeral: true });

    // log
    try {
      const log = new EmbedBuilder()
        .setColor(0x8b5cf6)
        .setTitle('üéüÔ∏è Ticket utworzony')
        .addFields(
          { name: 'U≈ºytkownik', value: `<@${inter.user.id}>`, inline: true },
          { name: 'Kategoria', value: `${cat.emoji} ${cat.name}`, inline: true },
          { name: 'Kana≈Ç', value: `<#${ch.id}>`, inline: false },
        )
        .setTimestamp();
      await sendLogEmbed(client, inter.guild.id, log);
    } catch {}
  }

  /* -----------------------
   *    Zamkniƒôcie ticketa
   *  (transkrypt tylko dla ADM)
   * ----------------------- */
  async function handleClose(inter: ButtonInteraction) {
    if (!inter.guild) {
      await inter.reply({ content: 'Ta akcja dzia≈Ça tylko na serwerze.', ephemeral: true });
      return;
    }
    const ch = inter.channel;
    if (!ch || ch.type !== ChannelType.GuildText || !ch.name.startsWith('ticket-')) {
      await inter.reply({ content: 'To nie wyglƒÖda na kana≈Ç ticketa.', ephemeral: true });
      return;
    }

    await inter.reply({
      content: 'üîí Trwa zamykanie ticketa‚Ä¶',
      ephemeral: true,
    });

    // 1) Generuj transkrypt
    let transcriptAttachment: any = null;
    try {
      const { attachment } = await makeTranscript(ch as TextChannel, inter.guild);
      transcriptAttachment = attachment;
    } catch (e) {
      console.error('Transcript error:', e);
    }

    // 2) Zaktualizuj w bazie (status -> closed)
    try {
      const t = await prisma.ticket.findFirst({
        where: { guildId: inter.guild.id, channelId: ch.id, status: 'open' },
      });
      if (t) {
        await prisma.ticket.update({
          where: { id: t.id },
          data: { status: 'closed', closedAt: new Date() },
        });
      }
    } catch (e) {
      console.error('‚ùå B≈ÇƒÖd aktualizacji ticketa w bazie:', e);
    }

    // 3) Wy≈õlij do kana≈Çu log√≥w (administracja)
    try {
      const log = new EmbedBuilder()
        .setColor(0xef4444)
        .setTitle('üîí Ticket zamkniƒôty')
        .addFields(
          { name: 'ZamykajƒÖcy', value: `<@${inter.user.id}>`, inline: true },
          { name: 'Kana≈Ç', value: `<#${ch.id}>`, inline: true },
        )
        .setTimestamp();

      // najpierw spr√≥buj przez util (embed)
      await sendLogEmbed(client, inter.guild.id, log);

      // nastƒôpnie do≈õlij plik transkryptu (je≈õli jest)
      const logChId = getLogChannelId?.();
      if (logChId && transcriptAttachment) {
        const logChannel = await inter.guild.channels.fetch(logChId).catch(() => null);
        if (logChannel && logChannel.isTextBased()) {
          await (logChannel as TextChannel).send({ files: [transcriptAttachment] });
        }
      }
    } catch (e) {
      console.error('Log send error:', e);
    }

    // 4) Usu≈Ñ kana≈Ç po chwili
    setTimeout(async () => {
      try {
        await ch.delete('Ticket zamkniƒôty');
      } catch {}
    }, 4000);
  }

  /* -----------------------
   *      Dodawanie/u.s.u.n.
   * ----------------------- */
  async function showUserModal(
    inter: ButtonInteraction,
    customId: string,
    title: string,
  ) {
    const modal = new ModalBuilder().setCustomId(customId).setTitle(title);

    const input = new TextInputBuilder()
      .setCustomId('user_input')
      .setLabel('ID lub wzmianka u≈ºytkownika')
      .setStyle(TextInputStyle.Short)
      .setPlaceholder('@u≈ºytkownik lub 123456789012345678')
      .setRequired(true);

    const row = new ActionRowBuilder<TextInputBuilder>().addComponents(input);
    modal.addComponents(row);

    await inter.showModal(modal);
  }

  function parseUserId(raw: string): string | null {
    const mention = raw.match(/^<@!?(\d{17,20})>$/);
    if (mention) return mention[1];
    const id = raw.match(/^\d{17,20}$/);
    return id ? id[0] : null;
  }

  async function handleAddUser(inter: any) {
    if (!inter.guild || !inter.channel || inter.channel.type !== ChannelType.GuildText) {
      await inter.reply({ content: 'Ta akcja dzia≈Ça tylko na kanale ticketa.', ephemeral: true });
      return;
    }
    const value = inter.fields.getTextInputValue('user_input').trim();
    const id = parseUserId(value);
    if (!id) {
      await inter.reply({ content: '‚ùå Podaj poprawne ID lub wzmiankƒô.', ephemeral: true });
      return;
    }

    try {
      await inter.channel.permissionOverwrites.edit(id, {
        ViewChannel: true,
        SendMessages: true,
        ReadMessageHistory: true,
        AttachFiles: true,
      });
      await inter.reply({ content: `‚úÖ Dodano <@${id}> do tego ticketa.`, ephemeral: true });
    } catch (e) {
      console.error(e);
      await inter.reply({ content: '‚ùå Nie uda≈Ço siƒô dodaƒá u≈ºytkownika.', ephemeral: true });
    }
  }

  async function handleRemoveUser(inter: any) {
    if (!inter.guild || !inter.channel || inter.channel.type !== ChannelType.GuildText) {
      await inter.reply({ content: 'Ta akcja dzia≈Ça tylko na kanale ticketa.', ephemeral: true });
      return;
    }
    const value = inter.fields.getTextInputValue('user_input').trim();
    const id = parseUserId(value);
    if (!id) {
      await inter.reply({ content: '‚ùå Podaj poprawne ID lub wzmiankƒô.', ephemeral: true });
      return;
    }

    try {
      await inter.channel.permissionOverwrites.delete(id);
      await inter.reply({ content: `‚úÖ Usuniƒôto <@${id}> z tego ticketa.`, ephemeral: true });
    } catch (e) {
      console.error(e);
      await inter.reply({ content: '‚ùå Nie uda≈Ço siƒô usunƒÖƒá u≈ºytkownika.', ephemeral: true });
    }
  }
}
